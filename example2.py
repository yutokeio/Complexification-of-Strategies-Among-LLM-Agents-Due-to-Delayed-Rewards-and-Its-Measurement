# -*- coding: utf-8 -*-
"""example2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AjDZ2sCOroKKoYUFGR0LysP1CNyUvyAS
"""

#本命プログラム(1/9)　具体例を3つにした。また、フローチャートのように戦略を書くように指示もした。log67とかはこれ。
import random
import requests

import urllib3
import warnings

# InsecureRequestWarningを無視
warnings.simplefilter('ignore', urllib3.exceptions.InsecureRequestWarning)

# APIエンドポイントとヘッダー設定
url = ""
headers = {
    "Content-Type": "application/json"
}

# 利得表の設定
payoff_matrix = {
    "(C, C)": (3, 3),
    "(C, D)": (-3, 7),
    "(D, C)": (7, -3),
    "(D, D)": (-1, -1)
}

policy = """
1. Start: Begin with cooperation (C).
2. If the opponent cooperates: Choose cooperation (C).
3. If the opponent defects:
   - Choose defection (D) and monitor the opponent's next move.
   - If the opponent cooperates after defecting, choose cooperation (C) to re-establish mutual cooperation.
   - If the opponent defects again, choose defection (D) and occasionally attempt cooperation.
4. Every 5 rounds, randomly select either cooperation or defection.
"""

# 方針に基づき行動を決定
def decide_action(agent_name, policy, history):
    request_data = {
        "mode": "chat-instruct",
        "character": "Example",
        "messages": history + [
            {"role": "user", "content": f"Agent{agent_name}, based on the policy: {policy} and considering the history of past interactions, respond with exactly one letter: 'C' for cooperate or 'D' for defect. Provide no explanation or additional text."}
            ]
            }
    while True:
        # APIリクエストを送信
        response = requests.post(url, headers=headers, json=request_data, verify=False)

        # レスポンスが正しい形式の場合に処理を続行
        if response.headers.get("Content-Type") == "application/json":
            response_json = response.json()
            if "choices" in response_json and len(response_json["choices"]) > 0 and "message" in response_json["choices"][0] and "content" in response_json["choices"][0]["message"]:
                choice_agent = response_json["choices"][0]["message"]["content"].strip()

                # 'C' または 'D' のみを許容
                if choice_agent in {"C", "D"}:
                    break

    return choice_agent

def refine_policy(agent_name, previous_policy, history):
    while True:
        request_data = {
          "mode": "chat-instruct",
          "character": "Example",
          "messages": history + [
            {
                "role": "user",
                "content": (
                    f"Agent{agent_name},you are a highly knowledgeable expert in game theory, well-versed in analyzing strategic interactions and consider a specific strategy in repeated games. You are participating in a repeated game with an agent. "
                    " Your task is to create a specific strategy that maximizes your total payoff over the course of the game."
                    "your task is to produce a **fully self-contained** updated strategy. "
                    "Below is your current (previous) strategy:\n"
                    f"{previous_policy}\n\n"
                    "Based on the outcomes of all past interactions (see system messages above),your current strategy and the analysis of the payoff matrix, "
                    "you must **integrate all the good parts** of the current policy while **improving or removing** suboptimal aspects. "
                    "Write the result as **one complete, standalone description** of the new strategy. "
                    "Explore various strategic options. "
                    "Strive to balance short-term gains with long-term benefits."
                    "Write a strategy in the form of a flowchart with conditional branches, so that cooperation or defection can be automatically chosen by following it."
                    "A reader should be able to understand this entire strategy **without any additional context**.\n\n"
                    "Do not use conversational tone, do not address any partner directly, and avoid phrases like 'let's hope'. "
                    "Present the final strategy in a clear, cohesive form, with all necessary details included. "
                    "Let's think step by step."
                )
              }
            ]
        }

        # APIリクエストを送信
        response = requests.post(url, headers=headers, json=request_data, verify=False)

        # レスポンスが正しい形式の場合に処理を続行
        if response.headers.get("Content-Type") == "application/json":
            response_json = response.json()
            if "choices" in response_json and len(response_json["choices"]) > 0 and "message" in response_json["choices"][0] and "content" in response_json["choices"][0]["message"]:
                content = response_json["choices"][0]["message"]["content"]
                break

    return content

# 総当たり戦の実行
def run_round_robin(agents, generations, min_turns=20, max_turns=29):
    policies = {agent:policy for agent in agents}
    histories = {agent: [] for agent in agents}
    total_payoffs = {agent: 0 for agent in agents}
    total_turns = {agent: 0 for agent in agents}
    print(policies)

    for gen in range(generations):
        print(f"Generation {gen + 1}")

        for i, agent1 in enumerate(agents):
            for j, agent2 in enumerate(agents):
                if i >= j:
                    continue

                num_turns = random.randint(min_turns, max_turns)
                print(f"  Match: {agent1} vs {agent2} ({num_turns} turns)")

                # 最初のターンの行動をランダムに選択
                if gen == 0:  # 一世代目
                    action1 = random.choice(["C", "D"])
                    action2 = random.choice(["C", "D"])

                else:  # それ以外は通常通り決定
                    action1 = decide_action(agent1, policies[agent1], histories[agent1])
                    action2 = decide_action(agent2, policies[agent2], histories[agent2])

                payoff = payoff_matrix.get(f"({action1}, {action2})", (0, 0))
                total_payoffs[agent1] += payoff[0]
                total_payoffs[agent2] += payoff[1]

                total_turns[agent1] += 1
                total_turns[agent2] += 1

                histories[agent1].append({"role": "system", "content": f"Turn1 you chose {action1} and {agent2} chose {action2} payoff: {payoff[0]}"})
                histories[agent2].append({"role": "system", "content": f"Turn1 you chose {action2} and {agent1} chose {action1} payoff: {payoff[1]}"})

                # 対戦結果を表示
                print(f"  Agent {agent1} chose {action1} | Agent {agent2} chose {action2} | Payoff: {payoff[0]} vs {payoff[1]}")

                for turn in range(num_turns - 1):
                    action1 = decide_action(agent1, policies[agent1], histories[agent1])
                    action2 = decide_action(agent2, policies[agent2], histories[agent2])

                    payoff = payoff_matrix.get(f"({action1}, {action2})", (0, 0))
                    total_payoffs[agent1] += payoff[0]
                    total_payoffs[agent2] += payoff[1]

                    total_turns[agent1] += 1
                    total_turns[agent2] += 1

                    histories[agent1].append({"role": "system", "content": f"Turn{turn + 2} you chose {action1} and {agent2} chose {action2} payoff: {payoff[0]}"})
                    histories[agent2].append({"role": "system", "content": f"Turn{turn + 2} you chose {action2} and {agent1} chose {action1} payoff: {payoff[1]}"})

                    # 対戦結果を表示
                    print(f"  Agent {agent1} chose {action1} | Agent {agent2} chose {action2} | Payoff: {payoff[0]} vs {payoff[1]}")

        for agent in agents:
            policies[agent] = refine_policy(agent, policies[agent], histories[agent])
        print(policies)
        for agent in agents:
          print(f"{agent}：", total_payoffs[agent] / total_turns[agent])

    average_payoffs = {agent: (total_payoffs[agent] / total_turns[agent] if total_turns[agent] > 0 else 0) for agent in agents}
    return average_payoffs, policies

# エージェントの設定と実行
agents = [i for i in range(1, 6)]########################################################################
generations = 10
payoffs, final_policies = run_round_robin(agents, generations)

# 結果を表示
print("Final Payoffs:")
for agent, payoff in payoffs.items():
    print(f"{agent}: {payoff}")

print("\nFinal Policies:")
for agent, policy in final_policies.items():
    print(f"{agent}:\n{policy}")